<script>

    /* CURSOR BLINKING SCRIPT*/

    let curs = true;
    const speed = 500;
    const cursor = document.getElementById('Calc-Res-Cursor');

    const cursorBlink = () => {
        if(curs){
            cursor.style.opacity = 0;
            curs = false;
        }else{
            cursor.style.opacity = 1;
            curs = true;
        }
    };

    setInterval(() => {
        cursorBlink();
    }, speed);

    /* CALCULATOR FUNCTIONS SCRIPT */

    const resultText = document.getElementById('Calc-Res-Text');

    let currentResultText = "";
    let needsRightParenthesis = false;
    let endIndex = -1;
    let leftoverResult = 0;
    let specialCharacters = ["+","-","x","/","%","(","."];
    let equalsNeededCharacters = ["+","-","x","/","%"];


    const fadeButtonColor = (button) => {
        button.classList.toggle("fade-in");
        setTimeout(() => {
            button.classList.toggle("fade-in");
        }, 100);
    };

    const updateResultWindow = (value) => {
        if(value == "="){
            resultText.innerHTML = determineOutputValue();
        }else if(value == "C"){
            resultText.innerHTML = "0";
        }else if(value == "n"){

        }else if(resultText.innerHTML.length == 1 && resultText.innerHTML == "0"){
            if(value == "."){
                resultText.innerHTML += value;
            }else{
                resultText.innerHTML = value;
            }
        }else{
            resultText.innerHTML += value;
        }
        endIndex = currentResultText.length - 1;
    };

    const determineOutputValue = () => {
        let res = parseParenthesis(currentResultText);
        console.log(res);
    };

    const parseParenthesis = (value) => {
        let og = value;
        while(value.includes("(")){
            let ind1 = value.indexOf("(");
            let ind2 = value.indexOf(")");
            let recRes = parseParenthesis(value.substring(ind1+1,ind2));
            value = value.substring(0,ind1) + recRes + value.substring(ind2+1);
        }
        console.log("parseParenthesis", og, value);
        value = doPEMDMAS(value);
        return value;
    };

    const doPEMDMAS = (value) => {
        let tempVal = value;
        let opsLeft = true;
        let totalOps = 0;
        while(opsLeft){
            if(tempVal.includes("x")){
                let ind = tempVal.indexOf("x");
                let leftOfOp = tempVal.substring(0,ind);
                let leftInd = determineOpIndexLeft(leftOfOp);
                let rightOfOp = tempVal.substring(ind+1);
                let rightInd = determineOpIndexRight(rightOfOp);
                let leftVal = tempVal.substring(leftInd,ind);
                let rightVal = "";
                if(rightInd == 0){
                    rightVal = tempVal.substring(ind+1);
                }else{
                    rightVal = tempVal.substring(ind+1,ind+1+rightInd);
                }
                tempVal = tempVal.substring(0,leftInd) +
                doCalc(leftVal,rightVal,"x") + tempVal.substring(ind+1,ind+1+rightInd);
            }else if(tempVal.includes("/")){
                let ind = tempVal.indexOf("/");
                let leftOfOp = tempVal.substring(0,ind);
                let leftInd = determineOpIndexLeft(leftOfOp);
                let rightOfOp = tempVal.substring(ind+1);
                let rightInd = determineOpIndexRight(rightOfOp);
                let leftVal = tempVal.substring(leftInd,ind);
                let rightVal = "";
                if(rightInd == 0){
                    rightVal = tempVal.substring(ind+1);
                }else{
                    rightVal = tempVal.substring(ind+1,ind+1+rightInd);
                }
                console.log(leftInd,rightInd);
                console.log(leftVal,rightVal);
                tempVal = tempVal.substring(0,leftInd) +
                doCalc(leftVal,rightVal,"/") + tempVal.substring(ind+1,ind+1+rightInd);
            }else if(tempVal.includes("%")){
                let ind = tempVal.indexOf("%");
                let leftOfOp = tempVal.substring(0,ind);
                let leftInd = determineOpIndexLeft(leftOfOp);
                let rightOfOp = tempVal.substring(ind+1);
                let rightInd = determineOpIndexRight(rightOfOp);
                let leftVal = tempVal.substring(leftInd,ind);
                let rightVal = "";
                if(rightInd == 0){
                    rightVal = tempVal.substring(ind+1);
                }else{
                    rightVal = tempVal.substring(ind+1,ind+1+rightInd);
                }
                console.log(leftInd,rightInd);
                console.log(leftVal,rightVal);
                tempVal = tempVal.substring(0,leftInd) +
                doCalc(leftVal,rightVal,"%") + tempVal.substring(ind+1,ind+1+rightInd);
            }else if(tempVal.includes("+")){
                let ind = tempVal.indexOf("+");
                let leftOfOp = tempVal.substring(0,ind);
                let leftInd = determineOpIndexLeft(leftOfOp);
                let rightOfOp = tempVal.substring(ind+1);
                let rightInd = determineOpIndexRight(rightOfOp);
                let leftVal = tempVal.substring(leftInd,ind);
                let rightVal = "";
                if(rightInd == 0){
                    rightVal = tempVal.substring(ind+1);
                }else{
                    rightVal = tempVal.substring(ind+1,ind+1+rightInd);
                }
                console.log(leftInd,rightInd);
                console.log(leftVal,rightVal);
                tempVal = tempVal.substring(0,leftInd) +
                doCalc(leftVal,rightVal,"+") + tempVal.substring(ind+1,ind+1+rightInd);
            }else if(tempVal.includes("-")){
                let ind = tempVal.indexOf("-");
                let leftOfOp = tempVal.substring(0,ind);
                let leftInd = determineOpIndexLeft(leftOfOp);
                let rightOfOp = tempVal.substring(ind+1);
                let rightInd = determineOpIndexRight(rightOfOp);
                let leftVal = tempVal.substring(leftInd,ind);
                let rightVal = "";
                if(rightInd == 0){
                    rightVal = tempVal.substring(ind+1);
                }else{
                    rightVal = tempVal.substring(ind+1,ind+1+rightInd);
                }
                console.log(leftInd,rightInd);
                console.log(leftVal,rightVal);
                tempVal = tempVal.substring(0,leftInd) +
                doCalc(leftVal,rightVal,"-") + tempVal.substring(ind+1,ind+1+rightInd);
            }else{
                opsLeft = false;
            }
            totalOps++;
            if(totalOps > 20){
                opsLeft = false;
            }
            console.log(tempVal,tempVal.length);
        }
        return tempVal;
    };

    const doCalc = (leftVal,rightVal,op) => {
        let retVal = 0;
        switch(op){
            case "+":
                retVal = parseFloat(leftVal) + parseFloat(rightVal);
                break;
            case "-":
                retVal = parseFloat(leftVal) - parseFloat(rightVal);
                break;
            case "x":
                retVal = parseFloat(leftVal) * parseFloat(rightVal);
                break;
            case "/":
                retVal = parseFloat(leftVal) / parseFloat(rightVal);
                break;
            case "%":
                retVal = parseFloat(leftVal) % parseFloat(rightVal);
                break;
        }
        return retVal;
    };

    const determineOpIndexLeft = (value) => {
        let opInd = 0;
        equalsNeededCharacters.forEach(op => {
            let tInd = value.indexOf(op);
            if(tInd > opInd){
                opInd = tInd;
            }
        });
        if(opInd != 0){
            opInd++;
        }
        return opInd;
    };

    const determineOpIndexRight = (value) => {
        let opInd = value.length;
        equalsNeededCharacters.forEach(op => {
            if(value.includes(op)){
                let tInd = value.indexOf(op);
                if(tInd < opInd){
                    opInd = tInd;
                }
            }
        });
        if(opInd == value.length){
            opInd = 0;
        }
        return opInd;
    };

    /* CALCULATOR BUTTON EVENT LISTENERS */

    clearClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');
        currentResultText = "";
        needsRightParenthesis = false;
        updateResultWindow(bVal);
    };

    negateClick = (button) => {
        fadeButtonColor(button);
        updateResultWindow("n");
    };

    parenthesisClick = (button) => {
        
        fadeButtonColor(button);   
        if(needsRightParenthesis){
            currentResultText += ")";
            updateResultWindow(")");
            needsRightParenthesis = false;
        }else{
            if(currentResultText[endIndex] != ")"){
                currentResultText += "(";
                updateResultWindow("(");
                needsRightParenthesis = true;
            }
        }
    };

    /* OPERATOR BUTTONS */

    equalsClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');
        let canCalc = false;
        equalsNeededCharacters.forEach(char => {
            if(currentResultText.includes(char)){
                canCalc = true;
            }
        });
        if(canCalc){
            updateResultWindow(bVal);
        }
    };

    functionClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');
        if(endIndex > -1){
            if(!specialCharacters.includes(currentResultText[endIndex])){
                currentResultText += bVal;
                updateResultWindow(bVal);
            }
        }
    };


    /* VALUE SET BUTTONS */

    decimalClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    zeroClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    oneClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    twoClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    threeClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    fourClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    fiveClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    sixClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    sevenClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    eightClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

    nineClick = (button) => {
        fadeButtonColor(button);
        let bVal = button.innerHTML.replace(/\s/g, '');    
        if(currentResultText[endIndex] != ")"){
            currentResultText += bVal;
            updateResultWindow(bVal);
        }
    };

</script>